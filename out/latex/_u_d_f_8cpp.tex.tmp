\hypertarget{_u_d_f_8cpp}{}\section{src/\+U\+DF.cpp File Reference}
\label{_u_d_f_8cpp}\index{src/\+U\+D\+F.\+cpp@{src/\+U\+D\+F.\+cpp}}


Realize function \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} in My\+S\+QL.  


{\ttfamily \#include $<$string$>$}\newline
{\ttfamily \#include $<$cstring$>$}\newline
{\ttfamily \#include \char`\"{}mysql.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}mysql\+\_\+com.\+h\char`\"{}}\newline
{\ttfamily \#include $<$cstdio$>$}\newline
{\ttfamily \#include $<$cstdlib$>$}\newline
{\ttfamily \#include $<$algorithm$>$}\newline
{\ttfamily \#include $<$sstream$>$}\newline
{\ttfamily \#include $<$map$>$}\newline
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$iomanip$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
{\ttfamily \#include \char`\"{}/root/mysql-\/8.\+0.\+30/include/mysql/udf\+\_\+registration\+\_\+types.\+h\char`\"{}}\newline
Include dependency graph for U\+D\+F.\+cpp\+:
% FIG 0
\subsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{structptr_struct}{ptr\+Struct}
\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
char $\ast$ \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char} (U\+D\+F\+\_\+\+I\+N\+IT $\ast$initid, U\+D\+F\+\_\+\+A\+R\+GS $\ast$args, char $\ast$result, unsigned long $\ast$length, char $\ast$is\+\_\+null, char $\ast$error)
\item 
bool \hyperlink{_u_d_f_8cpp_afddac0b3ea492bb31e3d025044c07247}{to\+\_\+char\+\_\+init} (U\+D\+F\+\_\+\+I\+N\+IT $\ast$initid, U\+D\+F\+\_\+\+A\+R\+GS $\ast$args, char $\ast$message, char $\ast$error)
\item 
void \hyperlink{_u_d_f_8cpp_aedbd677cd412671533b78c9ad3c5bf39}{to\+\_\+char\+\_\+deinit} (U\+D\+F\+\_\+\+I\+N\+IT $\ast$initid)
\item 
const char $\ast$ \hyperlink{_u_d_f_8cpp_a04fd9a8c6fb4d56094b60cd5bf112154}{item\+Result\+To\+String} (Item\+\_\+result type)
\item 
bool \hyperlink{_u_d_f_8cpp_a55694240754b68b7a624b23e7fdc1418}{check\+Legal} (U\+D\+F\+\_\+\+A\+R\+GS $\ast$args, U\+D\+F\+\_\+\+I\+N\+IT $\ast$initid)
\item 
void \hyperlink{_u_d_f_8cpp_ad937ce227e4af883720752a370a4460a}{args\+To\+Double} (U\+D\+F\+\_\+\+A\+R\+GS $\ast$args, double $\ast$d)
\item 
void \hyperlink{_u_d_f_8cpp_a0c1de153898dd9279662318f1a1badc9}{args\+To\+String} (U\+D\+F\+\_\+\+A\+R\+GS $\ast$args, std\+::string $\ast$s)
\item 
bool \hyperlink{_u_d_f_8cpp_ab1a01b35e127dba7836bfff35f6545d9}{split} (std\+::string $\ast$s1, std\+::string $\ast$s11, std\+::string $\ast$s12)
\item 
void \hyperlink{_u_d_f_8cpp_a007b7f55c095f743bb47022acc8e10db}{clear\+Strings} (std\+::string $\ast$s1, std\+::string $\ast$s2, bool $\ast$positive\+Number, int $\ast$have\+Symbol, int $\ast$dolor, std\+::vector$<$ std\+::pair$<$ char, int $>$$>$ $\ast$comma, bool $\ast$location\+OfS)
\item 
void \hyperlink{_u_d_f_8cpp_a3b737582663a311d7d45edc7890f588f}{handle\+E\+E\+EE} (U\+D\+F\+\_\+\+A\+R\+GS $\ast$args, std\+::string $\ast$container, int $\ast$sum\+Temp, const bool $\ast$positive\+Number)
\item 
void \hyperlink{_u_d_f_8cpp_aea2ff9e99301c010a7a09c633921b8bc}{deal\+Integer\+Part} (std\+::string $\ast$s11, std\+::string $\ast$s21, std\+::string $\ast$container, long long $\ast$s11tag, unsigned long long $\ast$temp)
\item 
void \hyperlink{_u_d_f_8cpp_a92b38520e727795d39435e5ffe48c00a}{deal\+Decimal\+Part} (std\+::string $\ast$s22, std\+::string $\ast$s12, std\+::string $\ast$container, const bool $\ast$is\+Decimal1, const bool $\ast$is\+Decimal2, int $\ast$sum\+Temp)
\item 
void \hyperlink{_u_d_f_8cpp_ade0d99c6462f61a8b5112085ba57da57}{assemble\+Ans} (std\+::vector$<$ std\+::pair$<$ char, int $>$$>$ $\ast$comma, std\+::string $\ast$container, const int $\ast$dolor, const int $\ast$have\+Symbol, const bool $\ast$positive\+Number, const bool $\ast$location\+OfS)
\end{DoxyCompactItemize}


\subsection{Detailed Description}
Realize function \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} in My\+S\+QL. 

\tabulinesep=1mm
\begin{longtabu} spread 0pt [c]{*{2}{|X[-1]}|}
\hline
\textbf{ Project }&Function \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} in My\+S\+QL \\\cline{1-2}
\textbf{ Author }&Qingyu Ma \\\cline{1-2}
\textbf{ Source }&N\+U\+LL \\\cline{1-2}
\end{longtabu}
\hypertarget{_u_d_f_8cpp_Project}{}\subsection{Detail}\label{_u_d_f_8cpp_Project}
Using U\+DF to implement the Oracle compatible function to\+\_\+\+Char() on My\+S\+QL. \hypertarget{_u_d_f_8cpp_Function}{}\subsection{Description}\label{_u_d_f_8cpp_Function}
Change everything to string. Supports separators, special symbols, Scientific notation with user-\/defined precision, etc. \hypertarget{_u_d_f_8cpp_Usage}{}\subsection{Description}\label{_u_d_f_8cpp_Usage}
Compile the source code into the so library and import it into My\+S\+QL. \hypertarget{_u_d_f_8cpp_Complete}{}\subsection{Date}\label{_u_d_f_8cpp_Complete}
29/10/22 \hypertarget{_u_d_f_8cpp_Special}{}\subsection{instructions}\label{_u_d_f_8cpp_Special}
In \textquotesingle{}E\+E\+EE\textquotesingle{} situation, if the third argument is null or is a error type, the default precision is 6, and if the third argument is less than 1, the default precision is 1 

\subsection{Function Documentation}
\mbox{\Hypertarget{_u_d_f_8cpp_ad937ce227e4af883720752a370a4460a}\label{_u_d_f_8cpp_ad937ce227e4af883720752a370a4460a}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!args\+To\+Double@{args\+To\+Double}}
\index{args\+To\+Double@{args\+To\+Double}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{args\+To\+Double()}{argsToDouble()}}
{\footnotesize\ttfamily void args\+To\+Double (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+A\+R\+GS $\ast$}]{args,  }\item[{double $\ast$}]{d }\end{DoxyParamCaption})}

Convert anything from args-\/$>$args\mbox{[}i\mbox{]} to double

Maybe unuseful, not used now 
\begin{DoxyParams}{Parameters}
{\em args} & \+: U\+DF function arguments \\
\hline
{\em d} & \+: Pointer to the double result \\
\hline
\end{DoxyParams}
$<$ type error \mbox{\Hypertarget{_u_d_f_8cpp_a0c1de153898dd9279662318f1a1badc9}\label{_u_d_f_8cpp_a0c1de153898dd9279662318f1a1badc9}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!args\+To\+String@{args\+To\+String}}
\index{args\+To\+String@{args\+To\+String}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{args\+To\+String()}{argsToString()}}
{\footnotesize\ttfamily void args\+To\+String (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+A\+R\+GS $\ast$}]{args,  }\item[{std\+::string $\ast$}]{s }\end{DoxyParamCaption})}

Convert anything from args-\/$>$args\mbox{[}i\mbox{]} to string

Maybe be only args-\/$>$arg\+\_\+type\mbox{[}0\mbox{]} == S\+T\+R\+I\+N\+G\+\_\+\+R\+E\+S\+U\+LT is useful 
\begin{DoxyParams}{Parameters}
{\em args} & \+: U\+DF function arguments \\
\hline
{\em s} & \+: Pointer to the string result \\
\hline
\end{DoxyParams}
$<$ type error \mbox{\Hypertarget{_u_d_f_8cpp_ade0d99c6462f61a8b5112085ba57da57}\label{_u_d_f_8cpp_ade0d99c6462f61a8b5112085ba57da57}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!assemble\+Ans@{assemble\+Ans}}
\index{assemble\+Ans@{assemble\+Ans}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{assemble\+Ans()}{assembleAns()}}
{\footnotesize\ttfamily void assemble\+Ans (\begin{DoxyParamCaption}\item[{std\+::vector$<$ std\+::pair$<$ char, int $>$$>$ $\ast$}]{comma,  }\item[{std\+::string $\ast$}]{container,  }\item[{const int $\ast$}]{dolor,  }\item[{const int $\ast$}]{have\+Symbol,  }\item[{const bool $\ast$}]{positive\+Number,  }\item[{const bool $\ast$}]{location\+OfS }\end{DoxyParamCaption})}

Assemble \textquotesingle{},\textquotesingle{}, \textquotesingle{}+\textquotesingle{}, \textquotesingle{}\$\textquotesingle{}, etc 
\begin{DoxyParams}{Parameters}
{\em comma} & \+: Pointer to vector of the location of \textquotesingle{},\textquotesingle{} \\
\hline
{\em container} & \+: Pointer to final result string \\
\hline
{\em dolor} & \+: Pointer to whether have \textquotesingle{}\$\textquotesingle{} \\
\hline
{\em have\+Symbol} & \+: Pointer to the location of symbol \\
\hline
{\em positive\+Number} & \+: Pointer to whether is a positive number \\
\hline
{\em location\+OfS} & \+: Pointer to the location of \textquotesingle{}S\textquotesingle{} \\
\hline
\end{DoxyParams}
$<$ assemble \textquotesingle{},\textquotesingle{} and \textquotesingle{}.\textquotesingle{}

$<$ assemble \textquotesingle{}\$\textquotesingle{}

$<$ assemble \textquotesingle{}+\textquotesingle{}, \textquotesingle{}-\/\textquotesingle{}, \textquotesingle{}$<$$>$\textquotesingle{} \mbox{\Hypertarget{_u_d_f_8cpp_a55694240754b68b7a624b23e7fdc1418}\label{_u_d_f_8cpp_a55694240754b68b7a624b23e7fdc1418}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!check\+Legal@{check\+Legal}}
\index{check\+Legal@{check\+Legal}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{check\+Legal()}{checkLegal()}}
{\footnotesize\ttfamily bool check\+Legal (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+A\+R\+GS $\ast$}]{args,  }\item[{U\+D\+F\+\_\+\+I\+N\+IT $\ast$}]{initid }\end{DoxyParamCaption})}

Check whether args-\/$>$args\mbox{[}1\mbox{]} is legal 
\begin{DoxyParams}{Parameters}
{\em args} & \+: U\+DF function arguments \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
\+: Whether the string is legal
\begin{DoxyItemize}
\item true is legal
\item false isn\textquotesingle{}t legal 
\end{DoxyItemize}
\end{DoxyReturn}
$<$ Convert lower case letters to upper case letters

$<$ Not legal

$<$ \char`\"{}\+E\+E\+E\+E\char`\"{}

$<$ \char`\"{}\+M\+I\char`\"{}

$<$ \char`\"{}\+P\+R\char`\"{}

$<$ \char`\"{}\+S\char`\"{} \mbox{\Hypertarget{_u_d_f_8cpp_a007b7f55c095f743bb47022acc8e10db}\label{_u_d_f_8cpp_a007b7f55c095f743bb47022acc8e10db}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!clear\+Strings@{clear\+Strings}}
\index{clear\+Strings@{clear\+Strings}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{clear\+Strings()}{clearStrings()}}
{\footnotesize\ttfamily void clear\+Strings (\begin{DoxyParamCaption}\item[{std\+::string $\ast$}]{s1,  }\item[{std\+::string $\ast$}]{s2,  }\item[{bool $\ast$}]{positive\+Number,  }\item[{int $\ast$}]{have\+Symbol,  }\item[{int $\ast$}]{dolor,  }\item[{std\+::vector$<$ std\+::pair$<$ char, int $>$$>$ $\ast$}]{comma,  }\item[{bool $\ast$}]{location\+OfS }\end{DoxyParamCaption})}

Clear\+Strings, after clearing, only numbers stay 
\begin{DoxyParams}{Parameters}
{\em s1} & \+: Pointer to integer part string \\
\hline
{\em s2} & \+: Pointer to decimal part string \\
\hline
{\em positive\+Number} & \+: Pointer to whether is a positive number \\
\hline
{\em have\+Symbol} & \+: Pointer to the location of symbol \\
\hline
{\em dolor} & \+: Pointer to whether have \textquotesingle{}\$\textquotesingle{} \\
\hline
{\em comma} & \+: Pointer to vector of the location of \textquotesingle{},\textquotesingle{} \\
\hline
{\em location\+OfS} & \+: Pointer to location of \textquotesingle{}S\textquotesingle{}\\
\hline
\end{DoxyParams}
In this function, s1 is not the whole first args, just the integer part of a args from U\+DF. So do s2. $<$ delete \textquotesingle{}-\/\textquotesingle{} in s1

$<$ after is \$1,2,3.\+123\+PR MI S

$<$ after is \$1,2,3.\+123

$<$ after is 1,2,3.\+123

$<$ after is 123.\+123, find position of \textquotesingle{},\textquotesingle{} and \textquotesingle{}.\textquotesingle{} \mbox{\Hypertarget{_u_d_f_8cpp_a92b38520e727795d39435e5ffe48c00a}\label{_u_d_f_8cpp_a92b38520e727795d39435e5ffe48c00a}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!deal\+Decimal\+Part@{deal\+Decimal\+Part}}
\index{deal\+Decimal\+Part@{deal\+Decimal\+Part}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{deal\+Decimal\+Part()}{dealDecimalPart()}}
{\footnotesize\ttfamily void deal\+Decimal\+Part (\begin{DoxyParamCaption}\item[{std\+::string $\ast$}]{s22,  }\item[{std\+::string $\ast$}]{s12,  }\item[{std\+::string $\ast$}]{container,  }\item[{const bool $\ast$}]{is\+Decimal1,  }\item[{const bool $\ast$}]{is\+Decimal2,  }\item[{int $\ast$}]{sum\+Temp }\end{DoxyParamCaption})}

Complete the decimal part of ans 
\begin{DoxyParams}{Parameters}
{\em s22} & \+: Pointer to decimal part string of args\mbox{[}1\mbox{]} \\
\hline
{\em s12} & \+: Pointer to decimal part string of args\mbox{[}0\mbox{]} \\
\hline
{\em container} & \+: Pointer to final result string \\
\hline
{\em is\+Decimal1} & \+: Pointer to whether args\mbox{[}0\mbox{]} is a decimal \\
\hline
{\em is\+Decimal2} & \+: Pointer to whether args\mbox{[}1\mbox{]} is a decimal \\
\hline
{\em sum\+Temp} & \+: Pointer to carry number\\
\hline
\end{DoxyParams}
Before this function, container already have completed the integer part. $<$ (-\/123, \textquotesingle{}9999.\+99\textquotesingle{}) -\/123.\+00

$<$ When s12-\/$>$length() $<$ s22-\/$>$length()

$<$ Need to carry

$<$ Excess carry \mbox{\Hypertarget{_u_d_f_8cpp_aea2ff9e99301c010a7a09c633921b8bc}\label{_u_d_f_8cpp_aea2ff9e99301c010a7a09c633921b8bc}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!deal\+Integer\+Part@{deal\+Integer\+Part}}
\index{deal\+Integer\+Part@{deal\+Integer\+Part}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{deal\+Integer\+Part()}{dealIntegerPart()}}
{\footnotesize\ttfamily void deal\+Integer\+Part (\begin{DoxyParamCaption}\item[{std\+::string $\ast$}]{s11,  }\item[{std\+::string $\ast$}]{s21,  }\item[{std\+::string $\ast$}]{container,  }\item[{long long $\ast$}]{s11tag,  }\item[{unsigned long long $\ast$}]{temp }\end{DoxyParamCaption})}

Complete the integer part of ans 
\begin{DoxyParams}{Parameters}
{\em s11} & \+: Pointer to integer part string \\
\hline
{\em s21} & \+: Pointer to decimal part string \\
\hline
{\em container} & \+: Pointer to final result string \\
\hline
{\em s11tag} & \+: Pointer to member of s11, used for ergodic \\
\hline
{\em temp} & \+: Pointer to a temp variable, used for ergodic \\
\hline
\end{DoxyParams}
$<$ complete the integer part \mbox{\Hypertarget{_u_d_f_8cpp_a3b737582663a311d7d45edc7890f588f}\label{_u_d_f_8cpp_a3b737582663a311d7d45edc7890f588f}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!handle\+E\+E\+EE@{handle\+E\+E\+EE}}
\index{handle\+E\+E\+EE@{handle\+E\+E\+EE}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{handle\+E\+E\+E\+E()}{handleEEEE()}}
{\footnotesize\ttfamily void handle\+E\+E\+EE (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+A\+R\+GS $\ast$}]{args,  }\item[{std\+::string $\ast$}]{container,  }\item[{int $\ast$}]{sum\+Temp,  }\item[{const bool $\ast$}]{positive\+Number }\end{DoxyParamCaption})}

Handle E\+E\+EE situation, change args to scientific notation 
\begin{DoxyParams}{Parameters}
{\em args} & \+: U\+DF function arguments \\
\hline
{\em container} & \+: Pointer to final result string \\
\hline
{\em sum\+Temp} & \+: Pointer to carry number \\
\hline
{\em positive\+Number} & \+: Pointer to whether is a positive number \\
\hline
\end{DoxyParams}
$<$ After this, only numbers and \textquotesingle{}.\textquotesingle{} stay

$<$ abs(container) $>$ 1

$<$ abs(container) $<$ 1

$<$ Erase useless, before this, number have it\textquotesingle{}s \textquotesingle{}.\textquotesingle{} \mbox{\Hypertarget{_u_d_f_8cpp_a04fd9a8c6fb4d56094b60cd5bf112154}\label{_u_d_f_8cpp_a04fd9a8c6fb4d56094b60cd5bf112154}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!item\+Result\+To\+String@{item\+Result\+To\+String}}
\index{item\+Result\+To\+String@{item\+Result\+To\+String}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{item\+Result\+To\+String()}{itemResultToString()}}
{\footnotesize\ttfamily const char$\ast$ item\+Result\+To\+String (\begin{DoxyParamCaption}\item[{Item\+\_\+result}]{type }\end{DoxyParamCaption})}

Convert enum Item\+\_\+result to char $\ast$ 
\begin{DoxyParams}{Parameters}
{\em type} & \+: Type of args-\/$>$args\mbox{[}i\mbox{]} \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
\+: String of type 
\end{DoxyReturn}
not valid for U\+D\+Fs

char $\ast$

double

long long

not valid for U\+D\+Fs \mbox{\Hypertarget{_u_d_f_8cpp_ab1a01b35e127dba7836bfff35f6545d9}\label{_u_d_f_8cpp_ab1a01b35e127dba7836bfff35f6545d9}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!split@{split}}
\index{split@{split}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{split()}{split()}}
{\footnotesize\ttfamily bool split (\begin{DoxyParamCaption}\item[{std\+::string $\ast$}]{s1,  }\item[{std\+::string $\ast$}]{s11,  }\item[{std\+::string $\ast$}]{s12 }\end{DoxyParamCaption})}

Split args-\/$>$args\mbox{[}0\mbox{]} and args-\/$>$args\mbox{[}1\mbox{]} by \textquotesingle{}.\textquotesingle{} 
\begin{DoxyParams}{Parameters}
{\em s1} & \+: Pointer to the string to be decomposed \\
\hline
{\em s12} & \+: Pointer to decimal part string \\
\hline
{\em s11} & \+: Pointer to integer part string \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
\+: Whether the string is a decimal
\begin{DoxyItemize}
\item true is a decimal
\item false isn\textquotesingle{}t a decimal 
\end{DoxyItemize}
\end{DoxyReturn}
$<$ is decimal

$<$ isn\textquotesingle{}t decimal \mbox{\Hypertarget{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}\label{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!to\+\_\+char@{to\+\_\+char}}
\index{to\+\_\+char@{to\+\_\+char}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{to\+\_\+char()}{to\_char()}}
{\footnotesize\ttfamily char $\ast$ to\+\_\+char (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+I\+N\+IT $\ast$}]{initid,  }\item[{U\+D\+F\+\_\+\+A\+R\+GS $\ast$}]{args,  }\item[{char $\ast$}]{result,  }\item[{unsigned long $\ast$}]{length,  }\item[{char $\ast$}]{is\+\_\+null,  }\item[{char $\ast$}]{error }\end{DoxyParamCaption})}

Oracle function \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} implemented on My\+S\+QL 8.\+0.\+25+ 
\begin{DoxyParams}{Parameters}
{\em initid} & \+: U\+DF initid arguments \\
\hline
{\em args} & \+: U\+DF function arguments \\
\hline
{\em result} & \+: U\+DF function result \\
\hline
{\em length} & \+: U\+DF function result length \\
\hline
{\em is\+\_\+null} & \+: U\+DF function result whether is null \\
\hline
{\em error} & \+: U\+DF function whether occur a error \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
\+: U\+DF function result 
\end{DoxyReturn}
$<$ args-\/$>$arg\+\_\+count == 1, 2

S2 arguments

$<$ 0 -\/$>$ none, 1 -\/$>$ (S) front and behind, 2-\/$>$ behind, 3-\/$>$ both \char`\"{}$<$$>$\char`\"{}

$<$ \textquotesingle{}\$\textquotesingle{} 0 -\/$>$ none, 1 -\/$>$ yes

$<$ locations of \textquotesingle{},\textquotesingle{} and \textquotesingle{}.\textquotesingle{}

$<$ 0 -\/$>$ \textquotesingle{}S\textquotesingle{} is in front, 1 -\/$>$ \textquotesingle{}S\textquotesingle{} is in end

S1 arguments

$<$ true -\/$>$ positive number, false -\/$>$ negative number

init s1 and s2

$<$ s1 is args-\/$>$args\mbox{[}0\mbox{]}

$<$ s2 is args-\/$>$args\mbox{[}1\mbox{]}, after is \$1,2,3.\+D123\+PR MI S

clear s1 and s2

init container, s11, s12, s21, s22

$<$ container (ans)

$<$ can only define here because the existing of \textquotesingle{}return\+\_\+label\textquotesingle{}

$<$ can only define here because the existing of \textquotesingle{}return\+\_\+label\textquotesingle{}

Exist \textquotesingle{}E\+E\+EE\textquotesingle{}, return using scientific notation

$<$ Return container

Error, print \char`\"{}\#\#\#\#\#\char`\"{} and return

$<$ print \char`\"{}\#\#\#\#\#\char`\"{} and return

$<$ stop and return the error

complete the integer part

complete the decimal part

start assemble

concluding work

$<$ print \char`\"{}\#\#\#\#\#\char`\"{} and return \mbox{\Hypertarget{_u_d_f_8cpp_aedbd677cd412671533b78c9ad3c5bf39}\label{_u_d_f_8cpp_aedbd677cd412671533b78c9ad3c5bf39}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!to\+\_\+char\+\_\+deinit@{to\+\_\+char\+\_\+deinit}}
\index{to\+\_\+char\+\_\+deinit@{to\+\_\+char\+\_\+deinit}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{to\+\_\+char\+\_\+deinit()}{to\_char\_deinit()}}
{\footnotesize\ttfamily void to\+\_\+char\+\_\+deinit (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+I\+N\+IT $\ast$}]{initid }\end{DoxyParamCaption})}

Deinit function \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} \begin{DoxySeeAlso}{See also}
\hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} 
\end{DoxySeeAlso}

\begin{DoxyParams}{Parameters}
{\em initid} & \+: U\+DF initid arguments \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{_u_d_f_8cpp_afddac0b3ea492bb31e3d025044c07247}\label{_u_d_f_8cpp_afddac0b3ea492bb31e3d025044c07247}} 
\index{U\+D\+F.\+cpp@{U\+D\+F.\+cpp}!to\+\_\+char\+\_\+init@{to\+\_\+char\+\_\+init}}
\index{to\+\_\+char\+\_\+init@{to\+\_\+char\+\_\+init}!U\+D\+F.\+cpp@{U\+D\+F.\+cpp}}
\subsubsection{\texorpdfstring{to\+\_\+char\+\_\+init()}{to\_char\_init()}}
{\footnotesize\ttfamily bool to\+\_\+char\+\_\+init (\begin{DoxyParamCaption}\item[{U\+D\+F\+\_\+\+I\+N\+IT $\ast$}]{initid,  }\item[{U\+D\+F\+\_\+\+A\+R\+GS $\ast$}]{args,  }\item[{char $\ast$}]{message,  }\item[{char $\ast$}]{error }\end{DoxyParamCaption})}

Init function \hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} \begin{DoxySeeAlso}{See also}
\hyperlink{_u_d_f_8cpp_a58b4f26bd12662f3c6ac8f7481fe0eb0}{to\+\_\+char()} 
\end{DoxySeeAlso}

\begin{DoxyParams}{Parameters}
{\em initid} & \+: U\+DF initid arguments \\
\hline
{\em args} & \+: U\+DF function arguments \\
\hline
{\em message} & \+: U\+DF function error message \\
\hline
{\em error} & \+: U\+DF function whether occur a error \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
\+: U\+DF function whether occur a error
\begin{DoxyItemize}
\item true init fail
\item false init success 
\end{DoxyItemize}
\end{DoxyReturn}
$<$ \textquotesingle{}E\+E\+EE\textquotesingle{} for the third of args 